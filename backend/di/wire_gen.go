// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"go-todo-app/application/todo"
	"go-todo-app/application/user"
	"go-todo-app/infrastructure/repository"
	"go-todo-app/infrastructure/supabase"
	"go-todo-app/interface-adapter/handler"
)

// Injectors from container.go:

// InitializeUserControllerは依存関係を組み立ててUserControllerを返す
func InitializeUserController() (*handler.UserController, error) {
	client := supabase.NewSupabaseClient()
	iUserRepository := repository.NewUserRepository(client)
	signUpUseCase := user.NewSignUpUseCase(iUserRepository)
	loginUseCase := user.NewLoginUseCase(iUserRepository)
	userController := handler.NewUserController(signUpUseCase, loginUseCase)
	return userController, nil
}

// InitializeTodoControllerは依存関係を組み立ててTodoControllerを返す
func InitializeTodoController() (*handler.TodoController, error) {
	client := supabase.NewSupabaseClient()
	ITodoRepository := repository.NewTodoRepository(client)
	getTodoByIdUseCase := todo.NewGetTodoByIdUseCase(ITodoRepository)
	searchTodoUseCase := todo.NewSearchTodoUseCase(ITodoRepository)
	createTodoUseCase := todo.NewCreateTodoUseCase(ITodoRepository)
	updateTodoUseCase := todo.NewUpdateTodoUseCase(ITodoRepository)
	deleteTodoUseCase := todo.NewDeleteTodoUseCase(ITodoRepository)
	todoController := handler.NewTodoController(getTodoByIdUseCase, searchTodoUseCase, createTodoUseCase, updateTodoUseCase, deleteTodoUseCase)
	return todoController, nil
}
